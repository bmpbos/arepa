import arepa
import os
import sys
import sfle
import pickle

#------------------------------------------------------------------------------

c_URL			= "http://regulondb.ccg.unam.mx/data/network_tf_gene.txt"
c_strInputTaxIDs	= sfle.d( arepa.path_arepa( ), sfle.c_strDirTmp, "taxids" )
c_strFileRegDBTXT       = File(sfle.d( sfle.c_strDirTmp, os.path.basename(c_URL)))
c_strProgRegDB  	= File( sfle.d( arepa.path_repo( ), sfle.c_strDirSrc, "regulondb.py" ) )

c_fileInMeta		= sfle.d( sfle.c_strDirEtc, "regulondb.txt" )

c_fileOutDAT            = sfle.d( sfle.c_strDirData, "regulondb.dat" )
c_fileOutDAB            = sfle.d( sfle.c_strDirData,  File( sfle.rebase(c_fileOutDAT, ".dat", ".dab" )))
c_fileOutQUANT          = sfle.d( sfle.c_strDirData,  File( sfle.rebase(c_fileOutDAT, ".dat", ".quant" )))
c_fileOutPKL		= sfle.d( sfle.c_strDirData, "regulondb.pkl" )


#For GeneMapper:
c_fileMapDAT            = File(sfle.d( sfle.c_strDirData, "regulondb_mapped.dat" ))
c_path_GeneMapper       = sfle.d( arepa.path_arepa(), "GeneMapper")
c_funcGeneMapper        = sfle.d( c_path_GeneMapper, sfle.c_strDirSrc, "bridgemapper.py" )
c_strMappingfileEcoli   = sfle.d( c_path_GeneMapper, sfle.c_strDirEtc, "uniprotko","511145_eco_colibri-eco.list.map")


pE = Environment( )

#===============================================================================
# Download the source text file
#===============================================================================
sfle.download( pE,c_URL,c_strFileRegDBTXT )
NoClean( c_strFileRegDBTXT )


#===============================================================================

def funcRegulonDBExtracter(target, source, env):
	strT, astrSs = sfle.ts( target, source )
        strProg,strIn = astrSs[:2]
	return 	sfle.ex([strProg, strIn, strT])
Command( c_fileOutDAT, [c_strProgRegDB,c_strFileRegDBTXT], funcRegulonDBExtracter )


def funcGeneIdMapping( target, source, env):
        strT, astrSs = sfle.ts( target, source )
        strFunc, strDATin = astrSs[:2]
        return sfle.ex([ strFunc,strDATin, strT, c_strMappingfileEcoli, "[0,1]", "H", "Ck","None"]) 
Command( c_fileMapDAT,[c_funcGeneMapper, c_fileOutDAT ], funcGeneIdMapping)

#def funcDAB(target, source, env):
#	strT, astrSs = sfle.ts( target, source )
#        strIn = astrSs[0]
#        return sfle.ex([" Dat2Dab -o", strT, "-i", strIn])
#afileDAB = Command( c_fileOutDAB, c_fileOutDAT, funcDAB )

def funcDAB(target, source, env):
        strT, astrSs = sfle.ts( target, source )
        fileOut,fileMap = astrSs[:2]
        if os.stat(fileMap)[6]!=0:
                return sfle.ex([" Dat2Dab -o", strT, "-i", fileMap])
        else:
                return sfle.ex([" Dat2Dab -o", strT, "-i", fileOut])
Command( c_fileOutDAB, [c_fileOutDAT,c_fileMapDAT], funcDAB )


def funcMeta( target, source, env ):
        strT, astrSs = sfle.ts( target, source )
        strS = astrSs[0]
        with open( strT,"wb" ) as outputf:
                pickle.dump({k:v for k,v in map( lambda k: k.split("\t"), sfle.readcomment( strS ) )},\
                        outputf )
Command( c_fileOutPKL, [c_fileInMeta], funcMeta )
Default( c_fileOutPKL )

def funcQUANT( target, source, env ):
        strT, astrSs = sfle.ts( target, source )
        strS = astrSs[0]
        return (sfle.ex("echo '0.5\t1.5' >" + strT))
Command( c_fileOutQUANT, c_fileOutDAB ,funcQUANT )
Default( c_fileOutQUANT )

