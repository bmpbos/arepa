import arepa
import os
import sys
import sfle
import pickle

c_URL			= "http://www.compsysbio.org/bacteriome/dataset/combined_interactions.txt"
c_strInputTaxIDs	= sfle.d( arepa.path_arepa( ), sfle.c_strDirTmp, "taxids" )
c_strFileBactTXT        = File(sfle.d( sfle.c_strDirTmp, os.path.basename(c_URL)))
c_strProgBacteriome	= File( sfle.d( arepa.path_repo( ), sfle.c_strDirSrc, "bacteriome.py" ) )

c_fileOutDAT             = File(sfle.d( sfle.c_strDirData, "bacteriome.dat" ))


#For GeneMapper:
c_fileMapDAT        	= File(sfle.d( sfle.c_strDirData, "bacteriome_mapped00.dat" ))
c_fileMapDAT2		= File(sfle.d( sfle.c_strDirData, "bacteriome_mapped01.dat" ))
c_path_GeneMapper       = sfle.d( arepa.path_arepa(), "GeneMapper")
c_strGeneTo		= sfle.readcomment( sfle.d( arepa.path_arepa(),sfle.c_strDirEtc,"geneid" ) or ["Ck"] )
c_funcGeneMapper        = sfle.d( c_path_GeneMapper, sfle.c_strDirSrc, "bridgemapper.py" )
c_strMappingfileEcoli   = sfle.d(arepa.path_arepa(), "GeneMapper", sfle.c_strDirEtc, "uniprotko","511145_eco_ko_uniprot.map")
c_fileProgMakeUnique    = sfle.d( arepa.path_arepa(),sfle.c_strDirSrc,"makeunique.py")
c_fileInMeta		= sfle.d( arepa.path_repo(), sfle.c_strDirEtc, "bacteriome.txt" )

c_fileOutDAB            = File(sfle.d( sfle.c_strDirData,  File( sfle.rebase(c_fileMapDAT2, ".dat", ".dab" ))))
c_fileOutQUANT          = File(sfle.d( sfle.c_strDirData,  File( sfle.rebase(c_fileMapDAT2, ".dat", ".quant" ))))
c_fileOutPKL		= File(sfle.d( sfle.c_strDirData, "bacteriome.pkl" ))		 

pE = Environment( )

#===============================================================================
# Download the source text file
#===============================================================================
sfle.download( pE,c_URL,c_strFileBactTXT )
NoClean( c_strFileBactTXT )

def funcBacteriomeExtracter(target, source, env):
	strT, astrSs = sfle.ts( target, source )
        strProg,strIn = astrSs[:2]
	return 	sfle.ex([strProg, strIn, strT])
Command( c_fileOutDAT, [c_strProgBacteriome,c_strFileBactTXT], funcBacteriomeExtracter )


def funcGeneIdMapping( target, source, env):
        strT, astrSs = sfle.ts( target, source )
        strFunc, strDATin  = astrSs[:2]
        return sfle.ex([ strFunc,strDATin, strT, "-m", c_strMappingfileEcoli, "-c", "[0,1]", "-f", "Kg", "-t", c_strGeneTo[0]]) 
Command( c_fileMapDAT,[c_funcGeneMapper, c_fileOutDAT ], funcGeneIdMapping)


def funcMakeUnique( target, source, env ):
        strT, astrSs = sfle.ts( target, source )
        strProg, strIn = astrSs[:2]
        return sfle.ex([strProg,strIn,strT])
Command( c_fileMapDAT2,[c_fileProgMakeUnique,c_fileMapDAT], funcMakeUnique )

def funcDAB(target, source, env):
	strT, astrSs = sfle.ts( target, source )
        fileOut,fileMap = astrSs[:2]
	if os.stat(fileMap)[6]!=0: 		
        	return sfle.ex([" Dat2Dab -o", strT, "-i", fileMap])
	else:
		return sfle.ex([" Dat2Dab -o", strT, "-i", fileOut])
Command( c_fileOutDAB, [c_fileOutDAT,c_fileMapDAT2], funcDAB )

def funcMeta( target, source, env ):
	strT, astrSs = sfle.ts( target, source )
	strS = astrSs[0]
	with open( strT,"wb" ) as outputf:
		pickle.dump({k:v for k,v in map( lambda k: k.split("\t"), sfle.readcomment( strS ) )},\
			outputf	)
Command( c_fileOutPKL, [c_fileInMeta], funcMeta )
#Default( c_fileOutPKL )

def funcQUANT( target, source, env ):
        strT, astrSs = sfle.ts( target, source )
        strS = astrSs[0]
        return (sfle.ex("echo '0.5\t1.5' >" + strT))
Command( c_fileOutQUANT, c_fileOutDAB ,funcQUANT )
#Default( c_fileOutQUANT )

