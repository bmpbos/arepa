import arepa
import os
import sys

Import( "pE" )
pE.Import( "c_fileTaxIDs" )
c_fileInputInclude			= pE.File( arepa.d( arepa.c_strDirEtc, "include" ) )
c_fileInputExclude			= pE.File( arepa.d( arepa.c_strDirEtc, "exclude" ) )
c_fileExperiments			= pE.File( arepa.d( arepa.c_strDirTmp, "experiments" ) )
c_fileIDsTXT				= pE.File( arepa.d( arepa.c_strDirTmp, "ids.txt" ) )
c_fileProgExperiments2IDs	= pE.File( arepa.d( arepa.c_strDirSrc, "experiments2ids.py" ) )
c_strTXT					= ".txt"

pE.Dir( arepa.c_strDirTmp )

#===============================================================================
# Download the experiments source file
#===============================================================================

arepa.download( pE, "http://www.ebi.ac.uk/microarray-as/ae/xml/experiments",
	c_fileExperiments )
pE.NoClean( c_fileExperiments )

#===============================================================================
# Process experiments into the more compact ids.txt
#===============================================================================

afileIDsTXT = arepa.pipe( pE, c_fileExperiments, c_fileProgExperiments2IDs, c_fileIDsTXT,
	[[True, c_fileTaxIDs]] )

#===============================================================================
# Pass the IDs from intactc to child directories
#===============================================================================

setInclude = set(arepa.readcomment( c_fileInputInclude ))
setExclude = set(arepa.readcomment( c_fileInputExclude ))
def funcScanner( target, source, env, setInclude = setInclude, setExclude = setExclude ):
	for fileSource in source:
		for strLine in open( str(fileSource) ):
			astrLine = strLine.strip( ).split( "\t" )
			strID = astrLine[0]
			if ( setInclude and ( strID not in setInclude ) ) or ( strID in setExclude ):
				continue
			env["sconscript_child"]( target, fileSource, env, strID )
arepa.sconscript_children( pE, afileIDsTXT, funcScanner, 1, locals( ) )
