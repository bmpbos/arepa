import arepa
import os
import sys
import sfle
import pickle

pE = DefaultEnvironment( )

c_strURL				= "http://regulondb.ccg.unam.mx/data/network_tf_gene.txt"

c_fileInputTaxIDs			= sfle.d( pE, arepa.path_arepa( ), sfle.c_strDirTmp, "taxids" )
c_fileRegDBTXT	 			= sfle.d( pE, sfle.c_strDirTmp, os.path.basename(c_strURL))
c_fileProgRegDB				= sfle.d( pE, arepa.path_repo( ), sfle.c_strDirSrc, "regulondb.py" ) 
c_fileProgUnpickle			= sfle.d( pE, arepa.path_arepa( ), sfle.c_strDirSrc, "unpickle.py" )

c_fileInMeta				= sfle.d( pE, sfle.c_strDirEtc, "regulondb.txt" )

c_fileIDRawDAT				= sfle.d( pE, sfle.c_strDirData, "regulondb_00raw.dat" )
c_fileIDDAT					= sfle.d( pE, sfle.c_strDirData, "regulondb.dat" )
c_fileIDDAB					= sfle.d( pE, sfle.c_strDirData, sfle.rebase(str(c_fileIDRawDAT), ".dat", ".dab" ))
c_fileIDQUANT				= sfle.d( pE, sfle.c_strDirData, sfle.rebase(str(c_fileIDRawDAT), ".dat", ".quant" ))
c_fileIDPKL					= sfle.d( pE, sfle.c_strDirData, "regulondb.pkl" )

#For GeneMapper:
c_fileInputSConscriptGM		= sfle.d( pE, arepa.path_arepa(),sfle.c_strDirSrc,"SConscript_genemapping.py")
c_fileInputSConscriptDAB	= sfle.d( pE, arepa.path_arepa(), sfle.c_strDirSrc, "SConscript_dat-dab.py" )
c_fileStatus			= sfle.d( pE, sfle.c_strDirData, "status.txt" )

#===============================================================================
# Download the source text file
#===============================================================================

sfle.download( pE,c_strURL,c_fileRegDBTXT )

#Extractor 
sfle.op( pE, c_fileProgRegDB, [[c_fileRegDBTXT], [True,c_fileIDRawDAT]] )

#Launch gene mapping 
execfile(str(c_fileInputSConscriptGM))
astrMapped = funcGeneIDMapping( pE, c_fileIDRawDAT, arepa.genemap_genename( ), c_fileStatus,
	arepa.org2taxid( "Escherichia coli str. K-12 substr. MG1655" ) )
# Note that this must currently correspond to the "best" mapping file from GeneMapper
# For whatever reason, this is hard-coded to the type strain, not the species

#Make identifiers unique 
astrUnique = funcMakeUnique( pE, astrMapped[0] )
sfle.pipe( pE, c_fileInMeta, c_fileProgUnpickle, c_fileIDPKL, ["-r","-l",[c_fileStatus]] )

execfile(str(c_fileInputSConscriptDAB))

#DAT to DAB 
astrDAB = funcDAB( pE, c_fileIDDAB, [c_fileIDRawDAT, astrUnique[0]] )
funcPCL( pE, c_fileIDDAT, astrUnique[0] )
funcQUANT( pE, c_fileIDQUANT ) 
