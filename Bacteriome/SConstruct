import arepa
import os
import sys
import sfle


#------------------------------------------------------------------------------

c_URL			= "http://www.compsysbio.org/bacteriome/dataset/combined_interactions.txt"
c_strInputTaxIDs	= sfle.d( arepa.path_arepa( ), sfle.c_strDirTmp, "taxids" )
c_strFileBactTXT        = File(sfle.d( sfle.c_strDirTmp, os.path.basename(c_URL)))
c_strProgBacteriome	= File( sfle.d( arepa.path_repo( ), sfle.c_strDirSrc, "bacteriome.py" ) )

c_fileOutDAT             = File(sfle.d( sfle.c_strDirData, "bacteriome.dat" ))


#For GeneMapper:
c_fileMapDAT        	= File(sfle.d( sfle.c_strDirData, "bacteriome_mapped.dat" ))
c_path_GeneMapper       = sfle.d( arepa.path_arepa(), "GeneMapper")
c_funcGeneMapper        = sfle.d( c_path_GeneMapper, sfle.c_strDirSrc, "bridgemapper.py" )
c_strMappingfileEcoli   = sfle.d(sfle.c_strDirEtc,"511145_eco_ko_uniprot.map")

c_fileOutDAB             = File(sfle.d( sfle.c_strDirData,  File( sfle.rebase(c_fileMapDAT, ".dat", ".dab" ))))
c_fileOutQUANT           = File(sfle.d( sfle.c_strDirData,  File( sfle.rebase(c_fileMapDAT, ".dat", ".quant" ))))


pE = Environment( )

#===============================================================================
# Download the source text file
#===============================================================================
sfle.download( pE,c_URL,c_strFileBactTXT )
NoClean( c_strFileBactTXT )


#===============================================================================

def funcBacteriomeExtracter(target, source, env):
	strT, astrSs = sfle.ts( target, source )
        strProg,strIn = astrSs[:2]
	return 	sfle.ex([strProg, strIn, strT])
Command( c_fileOutDAT, [c_strProgBacteriome,c_strFileBactTXT], funcBacteriomeExtracter )


def funcGeneIdMapping( target, source, env):
        strT, astrSs = sfle.ts( target, source )
        strFunc, strDATin, strMapfile  = astrSs[:3]
        return sfle.ex([ strFunc,strDATin, strT, strMapfile, "[0,1]", "Kg", "Ck"]) 
Command( c_fileMapDAT,[c_funcGeneMapper, c_fileOutDAT,c_strMappingfileEcoli ], funcGeneIdMapping)


def funcDAB(target, source, env):
	strT, astrSs = sfle.ts( target, source )
        fileOut,fileMap = astrSs[:2]
	if os.stat(fileMap)[6]!=0: 		
        	return sfle.ex([" Dat2Dab -o", strT, "-i", fileMap])
	else:
		return sfle.ex([" Dat2Dab -o", strT, "-i", fileOut])
Command( c_fileOutDAB, [c_fileOutDAT,c_fileMapDAT], funcDAB )


def funcQUANT( target, source, env ):
        strT, astrSs = sfle.ts( target, source )
        strS = astrSs[0]
        return (sfle.ex("echo '0.5\t1.5' >" + strT))
Command( c_fileOutQUANT, c_fileOutDAB ,funcQUANT )
Default( c_fileOutQUANT )

